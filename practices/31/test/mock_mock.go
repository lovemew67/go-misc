// Code generated by MockGen. DO NOT EDIT.
// Source: test/mock.go

// Package test is a generated GoMock package.
package test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMock is a mock of Mock interface
type MockMock struct {
	ctrl     *gomock.Controller
	recorder *MockMockMockRecorder
}

// MockMockMockRecorder is the mock recorder for MockMock
type MockMockMockRecorder struct {
	mock *MockMock
}

// NewMockMock creates a new mock instance
func NewMockMock(ctrl *gomock.Controller) *MockMock {
	mock := &MockMock{ctrl: ctrl}
	mock.recorder = &MockMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMock) EXPECT() *MockMockMockRecorder {
	return m.recorder
}

// Bar mocks base method
func (m *MockMock) Bar(x int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar", x)
	ret0, _ := ret[0].(int)
	return ret0
}

// Bar indicates an expected call of Bar
func (mr *MockMockMockRecorder) Bar(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockMock)(nil).Bar), x)
}

// MockStub is a mock of Stub interface
type MockStub struct {
	ctrl     *gomock.Controller
	recorder *MockStubMockRecorder
}

// MockStubMockRecorder is the mock recorder for MockStub
type MockStubMockRecorder struct {
	mock *MockStub
}

// NewMockStub creates a new mock instance
func NewMockStub(ctrl *gomock.Controller) *MockStub {
	mock := &MockStub{ctrl: ctrl}
	mock.recorder = &MockStubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStub) EXPECT() *MockStubMockRecorder {
	return m.recorder
}

// Bar mocks base method
func (m *MockStub) Bar(x int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar", x)
	ret0, _ := ret[0].(int)
	return ret0
}

// Bar indicates an expected call of Bar
func (mr *MockStubMockRecorder) Bar(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockStub)(nil).Bar), x)
}
